// THIS CODE IS AUTOGENERATED WHEN THE PHP TEST SUITE IS RUN

microlang_test_number = 1;
microlang_test_count = 14;


microlang_tests[1] = function()
{
    var success;

    code = "";

    input = {};

    code = "";

    execute();

    var p,pc = 0;
    for( p in output ) if( output.hasOwnProperty( p ) ) pc++;
    success = assert( pc === 0, '(no data)' );

    return success;
};


microlang_tests[2] = function()
{
    var success;

    code = "";

    input = {};

    code = "   \n\n  \n ";

    execute();

    var p,pc = 0;
    for( p in output ) if( output.hasOwnProperty( p ) ) pc++;
    success = assert( pc === 0, '(no data)' );

    return success;
};


microlang_tests[3] = function()
{
    var success;

    code = "";

    input = { 'a': 1 };

    code = "   \n\n  \n ";

    execute();

    success = assert( output['a'] === 1, 'a = 1' );

    return success;
};


microlang_tests[4] = function()
{
    var success;

    code = "";

    input = { 'a': 'text', 'b': 10, 'c': 12.3 };

    code = "ta = typeof( a )\n";
    code+= "tb = typeof( b )\n";
    code+= "tc = typeof( c )\n";

    execute();

    success = assert( output['ta'] === 'string' && output['tb'] === 'int' && output['tc'] === 'float', 'ta = "string", tb = "int", tc = "float"' );

    return success;
};


microlang_tests[5] = function()
{
    var success;

    code = "";

    input = { 'a': true, 'b': 1, 'c': 1 }; // boolean not allowed

    code = "ta = typeof( a )\n";
    code+= "tb = typeof( b )\n";
    code+= "tc = typeof( c )\n";

    execute();

    success = assert();

    return success;
};


microlang_tests[6] = function()
{
    var success;

    code = "";

    input = { 'a': 10 };

    code = "a = float( a )\n"; // allowed

    execute();

    success = assert( output['a'] === 10.0, 'a = 10.0' );

    return success;
};


microlang_tests[7] = function()
{
    var success;

    code = "";

    input = { 'a': 12.3 };

    code = "a = int( a )\n"; // not allowed

    execute();

    success = assert();

    return success;
};


microlang_tests[8] = function()
{
    var success;

    code = "";

    input = { 'a': 1 };

    code = "b = \"foo\"\n";
    code+= "a = b\n"; // type change not allowed

    execute();

    success = assert();

    return success;
};


microlang_tests[9] = function()
{
    var success;

    code = "";

    input = {};

    code = "s = \"10.8\"\n";
    code+= "stoi = int(    s )\n";
    code+= "stof = float(  s )\n";
    code+= "stos = string( s )\n";
    code+= "i = 10E2\n";
    code+= "itoi = int(    i )\n";
    code+= "itof = float(  i )\n";
    code+= "itos = string( i )\n";
    code+= "f = 10.0e-2\n";
    code+= "ftoi = int(    f )\n";
    code+= "ftof = float(  f )\n";
    code+= "ftos = string( f )\n";

    execute();

    success = assert( output['stoi'] === 10 && output['stof'] === 10.8 && output['stos'] === "10.8" && output['itoi'] === 1000 && output['itof'] === 1000.0 && output['itos'] === "1000" && output['ftoi'] === 0 && output['ftof'] === 0.1 && output['ftos'] === "0.1", 'stoi = 10, stof = 10.8, stos = "10.8", itoi = 1000, itof = 1000.0, itos = "1000", ftoi = 0, ftof = 0.1, ftos = "0.1"' );

    return success;
};


microlang_tests[10] = function()
{
    var success;

    code = "";

    input = {};

    code = "i = -10e2\n";
    code+= "ti= typeof( i )\n";
    code+= "f = .0\n";
    code+= "tf= typeof( f )\n";

    execute();

    success = assert( output['i'] === -1000 && output['ti'] === 'int' && output['f'] === 0.0 && output['tf'] === 'float', 'i = -1000, ti = "int", f = 0.0, tf = "float"' );

    return success;
};


microlang_tests[11] = function()
{
    var success;

    code = "";

    input = {};

    code = "s = trim( \"\\t\\t\\r  \\n \\n foo \\n\\n  \\n\" )";

    execute();

    success = assert( output['s'] === 'foo', 's = "foo"' );

    return success;
};


microlang_tests[12] = function()
{
    var success;

    code = "";

    input = {};

    code = "s = trim( \"  \\n \\n foo bar\\n\\n  \\n\" )\n";

    execute();

    success = assert( output['s'] === 'foo bar', 's = "foo bar"' );

    return success;
};


microlang_tests[13] = function()
{
    var success;

    code = "";

    input = {};

    code = "s = trim( \"foo bar\" )";

    execute();

    success = assert( output['s'] === 'foo bar', 's = "foo bar"' );

    return success;
};


microlang_tests[14] = function()
{
    var success;

    code = "";

    input = {};

    code = "s = trim( \"\" )";

    execute();

    success = assert( output['s'] === '', 's = ""' );

    return success;
};


